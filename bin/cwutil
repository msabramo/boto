#!/usr/bin/env python
# Author: Chris Moyer <cmoyer@newstex.com>
# Description: CloudWatch Utility
# For listing stats, creating alarms, and managing 
# other CloudWatch aspects

import boto
cw = boto.connect_cloudwatch()

def list_metrics(namespace=None):
	"""List metrics, optionally filtering by a specific namespace"""
	print "%-10s %-50s %s" % ("Namespace", "Metric Name", "Dimensions")
	print "-"*80
	for m in cw.list_metrics():
		if namespace is None or namespace.upper() in m.namespace:
			print "%-10s %-50s %s" % (m.namespace, m.name, m.dimensions)

def help(fnc=None):
	"""Print help message, optionally about a specific function"""
	import inspect
	self = sys.modules['__main__']
	if fnc:
		try:
			cmd = getattr(self, fnc)
		except:
			cmd = None
		if not inspect.isfunction(cmd):
			print "No function named: %s found" % fnc
			sys.exit(2)
		(args, varargs, varkw, defaults) = inspect.getargspec(cmd)
		print cmd.__doc__
		print "Usage: %s %s" % (fnc, " ".join([ "[%s]" % a for a in args[1:]]))
	else:
		print "Usage: cwutil [command]"
		for cname in dir(self):
			if not cname.startswith("_") and not cname == "cmd":
				cmd = getattr(self, cname)
				if inspect.isfunction(cmd):
					doc = cmd.__doc__
					print "\t%s - %s" % (cname, doc)
	sys.exit(1)


if __name__ == "__main__":
	import sys
	self = sys.modules['__main__']
	if len(sys.argv) >= 2:
		try:
			cmd = getattr(self, sys.argv[1])
		except:
			cmd = None
		args = sys.argv[2:]
	else:
		cmd = help
		args = []
	if not cmd:
		cmd = help
	try:
		cmd(*args)
	except TypeError, e:
		print e
		help(cmd.__name__)
